bool SudokuSolve(int Grid[SUDOKU_ROW][SUDOKU_COL], int row_ind, int col_ind) {

    
    if (row_ind == SUDOKU_ROW)     //row index of 9 means we've filled all sudoku cells; return true

        return true;

    if (col_ind == SUDOKU_COL)               //col index of 9 means we've run off of valid column cells. call SudokuSolve again 
                                            //but add 1 to row_ind and set col_ind to 0 so that it may traverse to the next rows of cells
        return SudokuSolve(Grid, row_ind + 1, 0);
   

    if (!(isValidCell(Grid, row_ind, col_ind)))    //if the cell is not vacant (not zero), skip by calling the function again and adding 1 to  col_ind

        return SudokuSolve(Grid, row_ind, col_ind + 1);


        //executes if none of the above is violated
    for (int i = 1; i <= 9; i++) { //for-loop which tries all nums 1 to 9 for each cell
        if (!(CheckSubGrid(Grid, row_ind, col_ind, i)) && !(CheckRowCol(Grid, row_ind, col_ind, i))) {  //checks if the number 'i' is not within the subgrid
                                                                                                            //or row and col of that cell

            Grid[row_ind][col_ind] = i; //if above condition is not violated, set the value at that cell equal to 'i'

                //BACKTRACKING STARTS HERE

            if (SudokuSolve(Grid, row_ind, col_ind + 1) )   //recursively call SudokuSolve() to check next cell
                return true;    //if it returns true, sudoku puzzle is solved

                //if it returns false, it means nums 1 to 9 did not work for the next cell. It will return here and set the value at the cell
                //back to zero again and try the remaining nums
            Grid[row_ind][col_ind] = 0;
                
                //for example: 3 was assigned to starting cell before recursive call. If that recursive call on next cell returns false, return here
                  //and set that 3 back to zero, try next num, which is 4, and recursively call the function again.
                
            }
        }

        return false;         //makes function return false if all nums 1 to 9 are not valid for that cell

    }